from aiogram import types, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from datetime import date, timedelta
import calendar
from key_file import cur, base
from log_file import logger

user_router = Router()

class RecordToDoctor(StatesGroup):
    name_doc = State()
    date_record = State()
    time_record = State()
    note = State()


def day_on_month():
    today = date.today()
    days_in_month = calendar.monthrange(today.year, today.month)[1]
    last_day = date(today.year, today.month, days_in_month)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤
    date_list = []
    current = today
    while current <= last_day:
        date_list.append(current.strftime("%Y-%m-%d"))
        current += timedelta(days=1)
    return date_list

# —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä–∫–∏ —á–∞—Å—É —è–∫–∏–π –≤–∏–∑–Ω–∞—á–∏–≤ —Ç—Ä–µ–Ω–µ—Ä –¥–ª—è –ø—Ä–∏–π–º–∞–Ω–Ω—è
def time_doctor(id_doc):
    time_trainers = cur.execute('''SELECT time_doc FROM users WHERE id=?''', (id_doc,)).fetchall()
    if time_trainers[0][0] is None:
        return ['–ß–∞—Å –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä–æ–º',]
    else:
        str_time = time_trainers[0][0].split(',')
        return str_time


@user_router.callback_query(F.data == 'record_to_doctor')
async def chose_doc(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    try:
        all_doctors = cur.execute("""SELECT id, full_name FROM users WHERE role=? AND is_verified=?""", ('doctor', 1)).fetchall()
        for item in all_doctors:
            id_doc, name = item
            builder.add(InlineKeyboardButton(text=name, callback_data=f'doctor_{id_doc}'))
        builder.add(types.InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="Home"))
        builder.adjust(1)
        await callback.message.answer(text='–í–∏–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É –ª—ñ–∫–∞—Ä—ñ–≤', reply_markup=builder.as_markup())
        await state.set_state(RecordToDoctor.name_doc)
    except Exception as e:
        logger.error(f'–ü–æ–º–∏–ª–∫–∞ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ—ó chose_doc {e}')
        builder.add(types.InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="Home"))
        builder.adjust(1)
        await callback.message.answer(text="‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. "
                             "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=builder.as_markup())


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —ñ–º–µ–Ω—ñ —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–æ —è–∫–æ–≥–æ —Ö–æ—á–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å –ª—é–¥–∏–Ω–∞
@user_router.callback_query(F.data.startswith('doctor_'))
async def chose_date(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(id_doctor=callback.data.split('_')[1])
    builder = InlineKeyboardBuilder()
    for i in day_on_month():
        only_the_date = i.split('-')[2]
        builder.add(types.InlineKeyboardButton(text=only_the_date, callback_data=f'date_{i}'))
    builder.adjust(5)
    builder.row(types.InlineKeyboardButton(text='–ù–∞ –≥–æ–ª–æ–≤–Ω—É üè†', callback_data='Home'))  # –û–∫—Ä–µ–º–∞ –∫–Ω–æ–ø–∫–∞
    await callback.message.edit_text('–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —è–∫–∞ –í–∞–º —Ç—Ä–µ–±–∞ üóìÔ∏è', reply_markup=builder.as_markup())
    await state.set_state(RecordToDoctor.date_record)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞—Ç–∏ –Ω–∞ —è–∫—É —Ö–æ—á–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å –ª—é–¥–∏–Ω–∞
@user_router.callback_query(F.data.startswith('date_'))
async def record_to_coach_time(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(date_record=callback.data.split('_')[1])
    state_data = await state.get_data()
    id_doctor = state_data['id_doctor']
    reserved_time = cur.execute("""SELECT visit_time FROM appointments WHERE doctor_id = ? AND visit_date = ?""",
                                (id_doctor, state_data['date_record'])).fetchall()
    reservet_time_list = [i[0] for i in reserved_time]
    time_training = [item for item in time_doctor(id_doctor) if item not in reservet_time_list]
    builder = InlineKeyboardBuilder()
    if not time_training:
        builder.row(types.InlineKeyboardButton(text='–ù–∞ –≥–æ–ª–æ–≤–Ω—É üè†', callback_data='Home'))  # –û–∫—Ä–µ–º–∞ –∫–Ω–æ–ø–∫–∞
        await callback.message.edit_text(' üò¢ –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —É —Ç—Ä–µ–Ω–µ—Ä–∞ –≤—Å—ñ –≥–æ–¥–∏–Ω–∏ –∑–∞–π–Ω—è—Ç—ñ. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –¥–µ–Ω—å', reply_markup=builder.as_markup())
        await state.clear()
        await callback.answer()
        return
    else:
        for item in time_training:
            builder.add(types.InlineKeyboardButton(text=item, callback_data=f'time_{item}'))
        builder.adjust(2)
        builder.row(types.InlineKeyboardButton(text='–ù–∞ –≥–æ–ª–æ–≤–Ω—É üè†', callback_data='Home'))  # –û–∫—Ä–µ–º–∞ –∫–Ω–æ–ø–∫–∞
        await callback.message.edit_text('–í–∏–±–µ—Ä–∏ —á–∞—Å —è–∫–∏–π —Ç–æ–±—ñ —Ç—Ä–µ–±–∞ ‚è∞', reply_markup=builder.as_markup())
        await state.set_state(RecordToDoctor.time_record)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —á–∞—Å—É –Ω–∞ —è–∫–∏–π —Ö–æ—á–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å –ª—é–¥–∏–Ω–∞
@user_router.callback_query(F.data.startswith('time_'))
async def record_note(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(time_record=callback.data.split('_')[1])
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text='üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='Home'))
    await callback.message.edit_text('‚¨áÔ∏è –ó–∞–∑–Ω–∞—á—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤—ñ–∑–∏—Ç—É –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ .', reply_markup=builder.as_markup())
    await state.set_state(RecordToDoctor.note)


@user_router.message(RecordToDoctor.note)
async def save_appointment(message: types.Message, state: FSMContext):
    try:
        state_data = await state.get_data()
        id_doctor = state_data['id_doctor']
        date_record = state_data['date_record']
        time_record = state_data['time_record']
    except KeyError as e:
        logger.error(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á —É state_data: {e}")
        await message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await state.clear()
        return

    await state.clear()
    create_at = date.today()
    note = message.text.strip()

    logger.info(f"[APP] –î–∞–Ω—ñ –∑–∞–ø–∏—Å—É: {id_doctor}, {date_record}, {time_record}, {create_at}, {note}")

    try:
        doc_data = cur.execute("""SELECT full_name, telegram_id FROM users WHERE id = ?""", (id_doctor,)).fetchone()
        if not doc_data:
            await message.answer("‚ö†Ô∏è –õ—ñ–∫–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø–∏—Å –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
            return
        name_doc, id_telegram_doc = doc_data
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ SELECT –ª—ñ–∫–∞—Ä—è: {e}")
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ª—ñ–∫–∞—Ä—è. –ü–æ–≤—ñ–¥–æ–º—Ç–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        cur.execute("""INSERT INTO appointments (doctor_id, visit_date, visit_time, created_at, note, confirmed) VALUES (?, ?, ?, ?, ?, ?)""",
            (id_doctor, date_record, time_record, create_at, note, 0))
        base.commit()
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ INSERT —É appointments: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–∞–ø–∏—Å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text='–ù–∞ –≥–æ–ª–æ–≤–Ω—É üè†', callback_data='Home'))

    await message.answer(
        f'ü•≥ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –¥–æ –ª—ñ–∫–∞—Ä—è {name_doc} {date_record} —á–∏—Å–ª–∞ –Ω–∞ {time_record}',
        reply_markup=builder.as_markup()
    )

    logger.info(
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} (ID: {message.from_user.id}) "
        f"–∑–∞–ø–∏—Å–∞–≤—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è {name_doc} {date_record} —á–∏—Å–ª–∞ –Ω–∞ {time_record}"
    )

    try:
        if id_telegram_doc:
            await message.bot.send_message(chat_id=int(id_telegram_doc), text=f'üìÖ –£ –í–∞—Å –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å: {date_record} –æ {time_record}')
    except TelegramBadRequest as e:
        if "chat not found" in str(e).lower():
            logger.warning(f"‚ùå –õ—ñ–∫–∞—Ä {name_doc} (ID: {id_telegram_doc}) ‚Äî —á–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        else:
            logger.exception(f"‚ö†Ô∏è Telegram –ø–æ–º–∏–ª–∫–∞ –¥–ª—è –ª—ñ–∫–∞—Ä—è {id_telegram_doc}: {e}")
    except Exception as e:
        logger.exception(f"‚ùå –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª—ñ–∫–∞—Ä—é: {e}")
