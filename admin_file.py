import random

from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup



from key_file import cur, base
from log_file import logger

admin_router = Router()

class Verification_doc(StatesGroup):
    verific_doc = State()

class AddDoctor(StatesGroup):
    name_doc = State()
    role_doc = State()

class DellDoctor(StatesGroup):
    code_admin = State()
    coode_doc = State()

def generate_unique_code():
    while True:
        code = "{:06d}".format(random.randint(100000, 999999))
        exists = cur.execute(
            "SELECT 1 FROM users WHERE code = ?",
            (code,)
        ).fetchone()
        if not exists:
            return int(code)


@admin_router.message(Command('verification'))
async def verification_doctor(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} (ID: {message.from_user.id}) —Ö–æ—á–µ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ª—ñ–∫–∞—Ä—è")
    await message.answer('‚¨áÔ∏è –ù–∞–¥—ñ–π—à–ª—ñ—Ç—å —Å–≤—ñ–π –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó')
    await state.set_state(Verification_doc.verific_doc)


@admin_router.message(Verification_doc.verific_doc)
async def verification_code(message: types.Message, state: FSMContext):
    code = message.text.strip()
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="Home"))
    try:
        secret_code = cur.execute("""SELECT 1 FROM users WHERE code=?""", (code,)).fetchone()
        if secret_code is None:
            logger.warning(
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} (ID: {message.from_user.id}) –≤–≤—ñ–≤ –Ω–µ–ø—Ä–∏–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å –¥–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ª—ñ–∫–∞—Ä—è")
            await message.answer('‚ùå –í–∏ –≤–≤–µ–ª–∏ –ø–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
            await state.set_state(Verification_doc.verific_doc)
        else:
            logger.info(
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} (ID: {message.from_user.id}) –ø—Ä–æ–π—à–æ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ª—ñ–∫–∞—Ä—è")

            cur.execute("""UPDATE users SET is_verified=?, telegram_id=? WHERE code=?""", (1, int(message.from_user.id), code))
            base.commit()
            await state.clear()
            await message.answer('ü•≥ –í—ñ—Ç–∞—é –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø—Ä–æ–π–¥–µ–Ω–∞')
    except Exception as e:
        logger.error(f"[DB] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å SELECT: {e} —Ñ—É–Ω–∫—Ü—ñ—è - verification_code")
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. "
                             "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=builder.as_markup())
        await state.clear()


@admin_router.callback_query(F.data == 'add_doctor')
async def start_add_doc(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="Home"))
    await callback.message.answer('‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ü–º\ º—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –ª—ñ–∫–∞—Ä—è', reply_markup=builder.as_markup())
    await state.set_state(AddDoctor.name_doc)


@admin_router.message(AddDoctor.name_doc)
async def get_name_doc(message: types.Message, state: FSMContext):
    await state.update_data(name_doc=message.text.strip())
    keyboard_doc = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë®üèª‚Äçüíº –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="role:administrator"),
             InlineKeyboardButton(text="üë®‚Äç‚öïÔ∏è –õ—ñ–∫–∞—Ä", callback_data="role:doctor")],
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="Home")]
        ]
    )
    await message.answer(text='–í–∏–±–µ—Ä–∏ —Ä–æ–ª—å', reply_markup=keyboard_doc)
    await state.set_state(AddDoctor.role_doc)


@admin_router.callback_query(F.data.in_(['role:administrator', 'role:doctor']))
async def get_role_doc(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name_doc = data.get('name_doc')
    role_doc = callback.data.split(':')[1]
    code = generate_unique_code()

    cur.execute("""INSERT INTO users (full_name, role, code, is_verified) VALUES(?,?,?,?)""", (name_doc, role_doc, code, 0))
    base.commit()
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="Home"))
    await state.clear()
    await callback.message.answer(f'‚úÖ –õ—ñ–∫–∞—Ä—è –¥–æ–¥–∞–Ω–æ. –û—Å—å –π–æ–≥–æ –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–±—ñ–Ω–µ—Ç—É {code}', reply_markup=builder.as_markup())


@admin_router.callback_query(F.data == 'del_doctor')
async def get_admin_key(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="Home"))
    await callback.message.answer('‚¨áÔ∏è –î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ª—ñ–∫–∞—Ä—è –≤–≤–µ–¥—ñ—Ç—å –∫–ª—é—á –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                  reply_markup=builder.as_markup())
    await state.set_state(DellDoctor.code_admin)

@admin_router.message(DellDoctor.code_admin)
async def get_doc_key(message: types.Message, state: FSMContext):
    code_admin = message.text.upper()
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="Home"))
    try:
        chek_code = cur.execute("""SELECT role FROM users WHERE code=?""", (code_admin,)).fetchone()
        if chek_code is not None and chek_code[0] == 'administrator':
            await message.answer('‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –ª—ñ–∫–∞—Ä—è.', reply_markup=builder.as_markup())
            await state.set_state(DellDoctor.coode_doc)
        else:
            await message.answer('‚ùå –ö–æ–¥ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑', reply_markup=builder.as_markup())
            await state.set_state(DellDoctor.code_admin)

    except Exception as e:
        logger.error(f"[DB] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å SELECT: {e} —Ñ—É–Ω–∫—Ü—ñ—è - get_doc_key")
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. "
                             "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=builder.as_markup())
        await state.clear()

@admin_router.message(DellDoctor.coode_doc)
async def dell_doc(message: types.Message, state: FSMContext):
    code_doc = message.text
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="Home"))
    try:
        check_doc = cur.execute("""SELECT 1 FROM users WHERE code=?""", (code_doc,)).fetchone()
        if check_doc is not None:
            cur.execute("""DELETE FROM users WHERE code=?""", (code_doc,))
            base.commit()
            await message.answer('‚úÖ –õ—ñ–∫–∞—Ä—è –≤–∏–¥–∞–ª–µ–Ω–æ.', reply_markup=builder.as_markup())
            await state.clear()
        else:
            await message.answer('‚ùå –õ—ñ–∫–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —Å–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —â–µ —Ä–∞–∑.',
                                 reply_markup=builder.as_markup())
            await state.set_state(DellDoctor.coode_doc)

    except Exception as e:
        logger.error(f"[DB] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å SELECT: {e} —Ñ—É–Ω–∫—Ü—ñ—è - dell_doc")
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. "
                             "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=builder.as_markup())
        await state.clear()

