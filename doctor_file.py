from aiogram import types, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re

from key_file import cur, base
from log_file import logger
from key_file import all_time

doctor_router = Router()

class TimeDoctor(StatesGroup):
    check_time = State()

class AddPets(StatesGroup):
    pets_name = State()
    species = State()
    bread = State()
    owner_name = State()
    owner_phone = State()

def get_doctor_buttons():
    return {
        'set_time': '‚è≥ –í–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∞—Å –ø—Ä–∏–π–æ–º—É',
        'add_pets': 'üê∂ –î–æ–¥–∞—Ç–∏ —Ç–≤–∞—Ä–∏–Ω–∫—É'
    }

def doc_name(name):
    try:
        return cur.execute("""SELECT full_name FROM users WHERE telegram_id=?""", (name,)).fetchone()[0]

    except Exception as e:
        logger.error(f'‚ùå –ü–æ–º–∏–ª–∫–∞ {e} —Ñ—É–Ω–∫—Ü—ñ—è doc_name file doctor_file.py –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —ñ–º\ º—è –ª—ñ–∫–∞—Ä—è ')
        return '–ü–æ–º–∏–ª–∫–∞'

def get_home_builder() -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="Home"))
    builder.adjust(1)
    return builder

def check_msg(func, msg):
    if len(msg) > 0:
        return True
    else:
        logger.error(f'–í–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –ø–æ—Ä–æ–∂–Ω—ñ —É —Ñ—É–Ω–∫—Ü—ñ—ó {func}')
        return False

def is_valid_phone_number(phone: str) -> bool:
    return bool(re.fullmatch(r"0\d{9}", phone))

@doctor_router.callback_query(F.data == 'doc_meny')
async def meny_doctor(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    for key, value in get_doctor_buttons().items():
        builder.add(InlineKeyboardButton(text=value, callback_data=key))
    await callback.message.answer(f'üòÄ –í—ñ—Ç–∞—î–º–æ {doc_name(callback.from_user.id)} –≤–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é.', reply_markup=builder.as_markup())


@doctor_router.callback_query(F.data == 'set_time')
async def choose_hours(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(id_trainer=callback.from_user.id, selected_hours=[])

    builder = InlineKeyboardBuilder()
    for t in all_time:
        builder.add(types.InlineKeyboardButton(text=f'‚ùå {t}', callback_data=f'hours_{t.replace(":", "")}'))
    builder.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É ', callback_data='Home'))
    builder.adjust(3)
    builder.row(types.InlineKeyboardButton(text='‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏', callback_data='save_hours'))

    await callback.message.answer('‚è∞ –í–∏–±–µ—Ä–∏ –≥–æ–¥–∏–Ω–∏ –ø—Ä–∏–π–æ–º—É:', reply_markup=builder.as_markup())
    await state.set_state(TimeDoctor.check_time)


@doctor_router.callback_query(TimeDoctor.check_time, F.data.startswith('hours_'))
async def toggle_hour(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("selected_hours", [])
    time_val = callback.data.removeprefix('hours_')
    time_val = f"{time_val[:2]}:{time_val[2:]}"

    if time_val in selected:
        selected.remove(time_val)
    else:
        selected.append(time_val)
    await state.update_data(selected_hours=selected)

    # –û–Ω–æ–≤–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    for t in all_time:
        status = '‚úÖ' if t in selected else '‚ùå'
        builder.add(types.InlineKeyboardButton(text=f'{status} {t}', callback_data=f'hours_{t.replace(":", "")}'))
    builder.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='Home'))
    builder.adjust(3)
    builder.row(types.InlineKeyboardButton(text='‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏', callback_data='save_hours'))

    try:
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    except TelegramBadRequest:
        pass
    await callback.answer()


@doctor_router.callback_query(TimeDoctor.check_time, F.data == 'save_hours')
async def save_selected_hours(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    trainer_id = data['id_trainer']
    selected = data.get("selected_hours", [])
    times_string = ','.join(selected)
    builder = InlineKeyboardBuilder()
    try:
        cur.execute("UPDATE users SET time_doc = ? WHERE telegram_id = ?", (times_string, trainer_id))
        base.commit()
        builder.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='Home'))
        await callback.message.edit_text(f"‚úÖ –ì–æ–¥–∏–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {', '.join(selected)}", reply_markup=builder.as_markup())
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —á–∞—Å—É –ø—Ä–∏–π–æ–º—É –ª—ñ–∫–∞—Ä—è –≤ —Ñ—É–Ω–∫—Ü—ñ—ó save_selected_hours {e}')
        builder.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='Home'))
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. "
                             "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=builder.as_markup())
        await state.clear()
        await callback.answer()


@doctor_router.callback_query(F.data == 'add_pets')
async def create_a_record(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text('‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–ª–∏—á–∫—É —Ç–≤–∞—Ä–∏–Ω–∫–∏.', reply_markup=get_home_builder().as_markup())
    await state.set_state(AddPets.pets_name)


@doctor_router.message(AddPets.pets_name)
async def record_pets_name(message: types.Message, state: FSMContext):
    if check_msg(record_pets_name, message.text.strip()):
        await state.update_data(name_pets=message.text.strip())
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –≤–∏–¥ —Ç–≤–∞—Ä–∏–Ω–∫–∏ (üêà üêï üêç üêé ü¶ú)', reply_markup=get_home_builder().as_markup())
        await state.set_state(AddPets.species)
    else:
        logger.error(f'–õ—ñ–∫–∞—Ä {message.from_user.id} –Ω–µ –≤–≤—ñ–≤ –∫–ª–∏—á–∫—É —Ç–≤–∞—Ä–∏–Ω–∏')
        await message.answer('‚ùå –í–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup=get_home_builder().as_markup())
        await state.set_state(AddPets.pets_name)


@doctor_router.message(AddPets.species)
async def record_species(message: types.Message, state: FSMContext):
    if check_msg(record_species, message.text.strip()):
        await state.update_data(species=message.text.strip())
        await message.answer('‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ—Ä–æ–¥—É —Ç–≤–∞—Ä–∏–Ω–∫–∏', reply_markup=get_home_builder().as_markup())
        await state.set_state(AddPets.bread)
    else:
        logger.error(f'–õ—ñ–∫–∞—Ä {message.from_user.id} –Ω–µ –≤–≤—ñ–≤ –≤–∏–¥ —Ç–≤–∞—Ä–∏–Ω–∏')
        await message.answer('‚ùå –í–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup=get_home_builder().as_markup())
        await state.set_state(AddPets.species)


@doctor_router.message(AddPets.bread)
async def record_bread(message: types.Message, state: FSMContext):
    if check_msg(record_bread, message.text.strip()):
        await state.update_data(breed=message.text.strip())
        await message.answer('‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–º\ º—è –≥–æ—Å–ø–æ–¥–∞—Ä—è.', reply_markup=get_home_builder().as_markup())
        await state.set_state(AddPets.owner_name)
    else:
        logger.error(f'–õ—ñ–∫–∞—Ä {message.from_user.id} –Ω–µ –≤–≤—ñ–≤ –ø–æ—Ä–æ–¥—É —Ç–≤–∞—Ä–∏–Ω–∏')
        await message.answer('‚ùå –í–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup=get_home_builder().as_markup())
        await state.set_state(AddPets.bread)

@doctor_router.message(AddPets.owner_name)
async def record_bread(message: types.Message, state: FSMContext):
    if check_msg(record_bread, message.text.strip()):
        await state.update_data(owner_name=message.text.strip())
        await message.answer('‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≥–æ—Å–ø–æ–¥–∞—Ä—è —É —Ñ–æ—Ä–º–∞—Ç—ñ 0950000000.', reply_markup=get_home_builder().as_markup())
        await state.set_state(AddPets.owner_phone)
    else:
        logger.error(f'–õ—ñ–∫–∞—Ä {message.from_user.id} –Ω–µ —ñ–º\ º—è –≥–æ—Å–ø–æ–¥–∞—Ä—è —Ç–≤–∞—Ä–∏–Ω–∏')
        await message.answer('‚ùå –í–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup=get_home_builder().as_markup())
        await state.set_state(AddPets.owner_name)

@doctor_router.message(AddPets.owner_phone)
async def record_to_table(message: types.Message, state: FSMContext):
    if is_valid_phone_number(message.text.strip()):
        data_pets = await state.get_data()
        pets_name = data_pets['name_pets']
        pets_species = data_pets['species']
        pets_breed = data_pets['breed']
        owner_name = data_pets['owner_name']
        owner_phone = message.text.strip()
        try:
            result = cur.execute("""SELECT 1 FROM animals WHERE owner_phone=? AND name_pets=?""", (owner_phone, pets_name)).fetchone()
            if result is None:
                cur.execute("""INSERT INTO animals (name_pets, species, breed, owner_name, owner_phone)
                    VALUES (?, ?, ?, ?, ?)""", (pets_name, pets_species, pets_breed, owner_name, owner_phone))

                base.commit()
                logger.info('üêà –î–æ–¥–∞–Ω–æ —Ç–≤–∞—Ä–∏–Ω—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö')
                await message.answer(f'{pets_name} –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö', reply_markup=get_home_builder().as_markup())
                await state.clear()
            else:
                logger.warning('–¢–∞–∫–∞ –∫–ª–∏—á–∫–∞ —É —Ç–∞–∫–æ–≥–æ –≥–æ—Å–ø–æ–¥–∞—Ä—è –≤–∂–µ —ñ—Å–Ω—É—î')
                await message.answer('üêæ –¢–≤–∞—Ä–∏–Ω–∫–∞ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞ –∑–∞ –¥–∞–Ω–∏–º –≥–æ—Å–ø–æ–¥–∞—Ä–µ–º.',
                                     reply_markup=get_home_builder().as_markup())
                await state.clear()
        except Exception as e:
            logger.error(f'–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–≤–∞—Ä–∏–Ω–∫–∏ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ—è record_to_table {e}')
            await message.answer('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                 reply_markup=get_home_builder().as_markup())
            await message.answer('‚ùå –í–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                 reply_markup=get_home_builder().as_markup())
            await state.clear()
    else:
        logger.error(f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} –≤–≤—ñ–≤ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É –Ω–µ –≤—ñ—Ä–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ')
        await message.answer('‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —É –≤–∏–∑–Ω–∞—á–µ–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑.',
                             reply_markup=get_home_builder().as_markup())
        await state.set_state(AddPets.owner_phone)

