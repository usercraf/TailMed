from datetime import datetime

from aiogram import types, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re

from key_file import cur, base
from log_file import logger
from key_file import all_time
from doc_form import generate_tailmed_docx

doctor_router = Router()

class TimeDoctor(StatesGroup):
    check_time = State()

class AddPets(StatesGroup):
    pets_name = State()
    species = State()
    bread = State()
    owner_name = State()
    owner_phone = State()

class CheckPets(StatesGroup):
    check_pets = State()

class MedicalRecording(StatesGroup):
    get_owner_number = State()
    use_pets = State()
    get_category = State()
    get_date = State()
    get_title = State()
    get_details = State()

def get_doctor_buttons():
    return {
        'set_time': '‚è≥ –í–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∞—Å –ø—Ä–∏–π–æ–º—É',
        'add_pets': 'üê∂ –î–æ–¥–∞—Ç–∏ —Ç–≤–∞—Ä–∏–Ω–∫—É',
        'check_pets': '‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–≤–∞—Ä–∏–Ω–∫—É',
        'medical_record': 'üß¨ –ú–µ–¥–∏—á–Ω–∏–π –∑–∞–ø–∏—Å'
    }

def category_record():
    return  {"review": "–æ–≥–ª—è–¥",
             "analysis": "–∞–Ω–∞–ª—ñ–∑",
             "procedure": "–ø—Ä–æ—Ü–µ–¥—É—Ä–∞",
             "recommendation": "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è"}

def doc_name(name):
    try:
        return cur.execute("""SELECT full_name FROM users WHERE telegram_id=?""", (name,)).fetchone()[0]

    except Exception as e:
        logger.error(f'‚ùå –ü–æ–º–∏–ª–∫–∞ {e} —Ñ—É–Ω–∫—Ü—ñ—è doc_name file doctor_file.py –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —ñ–º\ º—è –ª—ñ–∫–∞—Ä—è ')
        return '–ü–æ–º–∏–ª–∫–∞'

def get_home_builder() -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="Home"))
    builder.adjust(1)
    return builder

def is_valid_phone_number(phone: str) -> bool:
    return bool(re.fullmatch(r"0\d{9}", phone))

@doctor_router.callback_query(F.data == 'doc_meny')
async def meny_doctor(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    for key, value in get_doctor_buttons().items():
        builder.add(InlineKeyboardButton(text=value, callback_data=key))
    builder.adjust(1)
    await callback.message.answer(f'üòÄ –í—ñ—Ç–∞—î–º–æ {doc_name(callback.from_user.id)} –≤–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é.', reply_markup=builder.as_markup())


@doctor_router.callback_query(F.data == 'set_time')
async def choose_hours(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(id_trainer=callback.from_user.id, selected_hours=[])

    builder = InlineKeyboardBuilder()
    for t in all_time:
        builder.add(types.InlineKeyboardButton(text=f'‚ùå {t}', callback_data=f'hours_{t.replace(":", "")}'))
    builder.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É ', callback_data='Home'))
    builder.adjust(3)
    builder.row(types.InlineKeyboardButton(text='‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏', callback_data='save_hours'))

    await callback.message.answer('‚è∞ –í–∏–±–µ—Ä–∏ –≥–æ–¥–∏–Ω–∏ –ø—Ä–∏–π–æ–º—É:', reply_markup=builder.as_markup())
    await state.set_state(TimeDoctor.check_time)


@doctor_router.callback_query(TimeDoctor.check_time, F.data.startswith('hours_'))
async def toggle_hour(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("selected_hours", [])
    time_val = callback.data.removeprefix('hours_')
    time_val = f"{time_val[:2]}:{time_val[2:]}"

    if time_val in selected:
        selected.remove(time_val)
    else:
        selected.append(time_val)
    await state.update_data(selected_hours=selected)

    # –û–Ω–æ–≤–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    for t in all_time:
        status = '‚úÖ' if t in selected else '‚ùå'
        builder.add(types.InlineKeyboardButton(text=f'{status} {t}', callback_data=f'hours_{t.replace(":", "")}'))
    builder.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='Home'))
    builder.adjust(3)
    builder.row(types.InlineKeyboardButton(text='‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏', callback_data='save_hours'))

    try:
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    except TelegramBadRequest:
        pass
    await callback.answer()


@doctor_router.callback_query(TimeDoctor.check_time, F.data == 'save_hours')
async def save_selected_hours(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    trainer_id = data['id_trainer']
    selected = data.get("selected_hours", [])
    times_string = ','.join(selected)
    builder = InlineKeyboardBuilder()
    try:
        cur.execute("UPDATE users SET time_doc = ? WHERE telegram_id = ?", (times_string, trainer_id))
        base.commit()
        builder.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='Home'))
        await callback.message.edit_text(f"‚úÖ –ì–æ–¥–∏–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {', '.join(selected)}", reply_markup=builder.as_markup())
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —á–∞—Å—É –ø—Ä–∏–π–æ–º—É –ª—ñ–∫–∞—Ä—è –≤ —Ñ—É–Ω–∫—Ü—ñ—ó save_selected_hours {e}')
        builder.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='Home'))
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. "
                             "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=builder.as_markup())
        await state.clear()
        await callback.answer()


@doctor_router.callback_query(F.data == 'add_pets')
async def create_a_record(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text('‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–ª–∏—á–∫—É —Ç–≤–∞—Ä–∏–Ω–∫–∏.', reply_markup=get_home_builder().as_markup())
    await state.set_state(AddPets.pets_name)


@doctor_router.message(AddPets.pets_name)
async def record_pets_name(message: types.Message, state: FSMContext):
    await state.update_data(name_pets=message.text.strip())
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –≤–∏–¥ —Ç–≤–∞—Ä–∏–Ω–∫–∏ (üêà üêï üêç üêé ü¶ú)', reply_markup=get_home_builder().as_markup())
    await state.set_state(AddPets.species)


@doctor_router.message(AddPets.species)
async def record_species(message: types.Message, state: FSMContext):
    await state.update_data(species=message.text.strip())
    await message.answer('‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ—Ä–æ–¥—É —Ç–≤–∞—Ä–∏–Ω–∫–∏', reply_markup=get_home_builder().as_markup())
    await state.set_state(AddPets.bread)


@doctor_router.message(AddPets.bread)
async def record_bread(message: types.Message, state: FSMContext):
    await state.update_data(breed=message.text.strip())
    await message.answer('‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–º\ º—è –≥–æ—Å–ø–æ–¥–∞—Ä—è.', reply_markup=get_home_builder().as_markup())
    await state.set_state(AddPets.owner_name)


@doctor_router.message(AddPets.owner_name)
async def record_bread(message: types.Message, state: FSMContext):
    await state.update_data(owner_name=message.text.strip())
    await message.answer('‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≥–æ—Å–ø–æ–¥–∞—Ä—è —É —Ñ–æ—Ä–º–∞—Ç—ñ 0950000000.', reply_markup=get_home_builder().as_markup())
    await state.set_state(AddPets.owner_phone)


@doctor_router.message(AddPets.owner_phone)
async def record_to_table(message: types.Message, state: FSMContext):
    if is_valid_phone_number(message.text.strip()):
        data_pets = await state.get_data()
        pets_name = data_pets['name_pets']
        pets_species = data_pets['species']
        pets_breed = data_pets['breed']
        owner_name = data_pets['owner_name']
        owner_phone = message.text.strip()
        try:
            result = cur.execute("""SELECT 1 FROM animals WHERE owner_phone=? AND name_pets=?""", (owner_phone, pets_name)).fetchone()
            if result is None:
                cur.execute("""INSERT INTO animals (name_pets, species, breed, owner_name, owner_phone)
                    VALUES (?, ?, ?, ?, ?)""", (pets_name, pets_species, pets_breed, owner_name, owner_phone))

                base.commit()
                logger.info('üêà –î–æ–¥–∞–Ω–æ —Ç–≤–∞—Ä–∏–Ω—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö')
                await message.answer(f'{pets_name} –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö', reply_markup=get_home_builder().as_markup())
                await state.clear()
            else:
                logger.warning('–¢–∞–∫–∞ –∫–ª–∏—á–∫–∞ —É —Ç–∞–∫–æ–≥–æ –≥–æ—Å–ø–æ–¥–∞—Ä—è –≤–∂–µ —ñ—Å–Ω—É—î')
                await message.answer('üêæ –¢–≤–∞—Ä–∏–Ω–∫–∞ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞ –∑–∞ –¥–∞–Ω–∏–º –≥–æ—Å–ø–æ–¥–∞—Ä–µ–º.',
                                     reply_markup=get_home_builder().as_markup())
                await state.clear()
        except Exception as e:
            logger.error(f'–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–≤–∞—Ä–∏–Ω–∫–∏ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ—è record_to_table {e}')
            await message.answer('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                 reply_markup=get_home_builder().as_markup())
            await message.answer('‚ùå –í–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                 reply_markup=get_home_builder().as_markup())
            await state.clear()
    else:
        logger.error(f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} –≤–≤—ñ–≤ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É –Ω–µ –≤—ñ—Ä–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ')
        await message.answer('‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —É –≤–∏–∑–Ω–∞—á–µ–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑.',
                             reply_markup=get_home_builder().as_markup())
        await state.set_state(AddPets.owner_phone)


@doctor_router.callback_query(F.data == 'check_pets')
async def get_number_owner(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text('‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', reply_markup=get_home_builder().as_markup())
    await state.set_state(CheckPets.check_pets)


@doctor_router.message(CheckPets.check_pets)
async def owner_pets(message: types.Message, state: FSMContext):
    if is_valid_phone_number(message.text.strip()):
        try:
            date_pets = cur.execute("""SELECT * FROM animals WHERE owner_phone=?""", (message.text.strip(),)).fetchall()
            for item in date_pets:
                id_pets, name_pets, species, breed, owner_name, owner_phone = item
                await message.answer(f'üì£ –î–∞–Ω–Ω—ñ –ø–æ —Ç–≤–∞—Ä–∏–Ω—Ü—ñ: '
                                     f'\n1Ô∏è‚É£ID –ù–æ–º–µ—Ä-{id_pets}'
                                     f'\n2Ô∏è‚É£–Ü–º º—è —Ç–≤–∞—Ä–∏–Ω–∫–∏-{name_pets}'
                                     f'\n3Ô∏è‚É£–í–∏–¥-{species}'
                                     f'\n4Ô∏è‚É£–ü–æ—Ä–æ–¥–∞-{breed}'
                                     f'\n5Ô∏è‚É£–Ü–º º—è –≤–ª–∞—Å–Ω–∏–∫–∞-{owner_name}'
                                     f'\n6Ô∏è‚É£–¢–µ–ª–µ—Ñ–æ–Ω –≤–ª–∞—Å–Ω–∏–∫–∞-{owner_phone}.')
            logger.info('–î–∞–Ω–Ω—ñ –ø–æ —Ç–≤–∞—Ä–∏–Ω—Ü—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ.')
            await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–¥—ñ–ª—å—à—ñ –¥—ñ—ñ', reply_markup=get_home_builder().as_markup())
            await state.clear()
        except Exception as e:
            logger.error(
                f'–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–≤–∞—Ä–∏–Ω–∫–∏ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ—è owner_pets {e}')
            await message.answer(
                '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                reply_markup=get_home_builder().as_markup())
            await message.answer('‚ùå –í–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                 reply_markup=get_home_builder().as_markup())
            await state.clear()
    else:
        logger.info('–ñ–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
        await message.answer('üôä –ñ–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', reply_markup=get_home_builder().as_markup())
        await state.clear()


@doctor_router.callback_query(F.data == 'medical_record')
async def medical_recording(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text('‚¨áÔ∏è –î–ª—è –≤–Ω–µ—Å–µ–Ω–Ω—è –º–µ–¥–∏—á–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–ª–∞—Å–Ω–∏–∫–∞.',
                                     reply_markup=get_home_builder().as_markup())
    await state.set_state(MedicalRecording.get_owner_number)

@doctor_router.message(MedicalRecording.get_owner_number)
async def check_owner_number(message: types.Message, state: FSMContext):
    if is_valid_phone_number(message.text.strip()):
        await state.update_data(owner_phone=message.text.strip())
        try:
            date_pets = cur.execute("""SELECT * FROM animals WHERE owner_phone=?""", (message.text.strip(),)).fetchall()
            for item in date_pets:
                builder = InlineKeyboardBuilder()
                id_pets, name_pets, species, breed, owner_name, owner_phone = item
                builder.add(types.InlineKeyboardButton(text='–í–∏–±—Ä–∞—Ç–∏', callback_data=f'mr_{id_pets}'))
                await message.answer(f'üì£ –î–∞–Ω–Ω—ñ –ø–æ —Ç–≤–∞—Ä–∏–Ω—Ü—ñ: '
                                     f'\n1Ô∏è‚É£ID –ù–æ–º–µ—Ä-{id_pets}'
                                     f'\n2Ô∏è‚É£–Ü–º º—è —Ç–≤–∞—Ä–∏–Ω–∫–∏-{name_pets}'
                                     f'\n3Ô∏è‚É£–í–∏–¥-{species}'
                                     f'\n4Ô∏è‚É£–ü–æ—Ä–æ–¥–∞-{breed}'
                                     f'\n5Ô∏è‚É£–Ü–º º—è –≤–ª–∞—Å–Ω–∏–∫–∞-{owner_name}'
                                     f'\n6Ô∏è‚É£–¢–µ–ª–µ—Ñ–æ–Ω –≤–ª–∞—Å–Ω–∏–∫–∞-{owner_phone}.', reply_markup=builder.as_markup())

            logger.info('–î–∞–Ω–Ω—ñ –ø–æ —Ç–≤–∞—Ä–∏–Ω—Ü—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ.')
            await state.set_state(MedicalRecording.use_pets)
        except Exception as e:
            logger.error(
                f'–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–≤–∞—Ä–∏–Ω–∫–∏ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ—è owner_pets {e}')
            await message.answer(
                '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                reply_markup=get_home_builder().as_markup())
            await message.answer('‚ùå –í–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                 reply_markup=get_home_builder().as_markup())
            await state.clear()
    else:
        logger.info('–ñ–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
        await message.answer('üôä –ñ–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', reply_markup=get_home_builder().as_markup())
        await state.clear()


@doctor_router.callback_query(MedicalRecording.use_pets, F.data.startswith('mr_'))
async def use_pets(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(animal_id=callback.data.split('_')[1])
    builder = InlineKeyboardBuilder()
    for key, value in category_record().items():
        builder.add(types.InlineKeyboardButton(text=value, callback_data=key))
    builder.add(types.InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="Home"))
    builder.adjust(1)
    await callback.message.answer('‚¨áÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é', reply_markup=builder.as_markup())
    await state.set_state(MedicalRecording.get_category)


@doctor_router.callback_query(MedicalRecording.get_category, F.data.in_(category_record().keys()))
async def title_record(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(category=category_record()[callback.data])
    if category_record()[callback.data] in ('–∞–Ω–∞–ª—ñ–∑', '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞'):
        await callback.message.answer('‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø—Ä–∏–π–æ–º—É –∞–Ω–∞–ª—ñ–∑—ñ–≤ –∞–±–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏.')
        await state.set_state(MedicalRecording.get_date)
    else:
        await callback.message.answer('‚¨áÔ∏è –í–µ–¥—ñ—Ç—å –ù–∞–∑–≤—É/—Ç–µ–º—É –∑–∞–ø–∏—Å—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ - –£–ó–î —á–µ—Ä–µ–≤–Ω–æ—ó –ø–æ—Ä–æ–∂–Ω–∏–Ω–∏',
                                      reply_markup=get_home_builder().as_markup())
        await state.set_state(MedicalRecording.get_title)


@doctor_router.message(MedicalRecording.get_date)
async def get_date(message: types.Message, state: FSMContext):
    logger.info('–í–∏–∫–æ–Ω–∞–Ω–æ –≤—Ö—ñ–¥ –¥–æ —Ä–æ—É—Ç–µ—Ä—É –∑ –≤–≤–µ–¥–µ–Ω–Ω—è–º –¥–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—ñ–≤ —á–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏.')
    await state.update_data(date=message.text)
    await message.answer('‚¨áÔ∏è –í–µ–¥—ñ—Ç—å –ù–∞–∑–≤—É/—Ç–µ–º—É –∑–∞–ø–∏—Å—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ - –£–ó–î —á–µ—Ä–µ–≤–Ω–æ—ó –ø–æ—Ä–æ–∂–Ω–∏–Ω–∏',
                                  reply_markup=get_home_builder().as_markup())
    await state.set_state(MedicalRecording.get_title)


@doctor_router.message(MedicalRecording.get_title)
async def title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text='–î–∞–ª—ñ', callback_data='Next'))
    await message.answer('‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å –û–ø–∏—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ / —â–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –î–∞–ª—ñ', reply_markup=builder.as_markup())
    await state.set_state(MedicalRecording.get_details)


@doctor_router.message(MedicalRecording.get_details)
async def details_msg(message: types.Message, state: FSMContext):
    logger.info('–õ—ñ–∫–∞—Ä–µ–º –≤–Ω–µ—Å–µ–Ω–Ω—ñ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞ —Ñ—É–Ω–∫—Ü—ñ—è details_msg')
    data_mr = await state.get_data()
    if data_mr.get('date'):
        date = data_mr.get('date')
    else:
        date = '–ù–µ –≤–∫–∞–∑–∞–Ω–æ –ª—ñ–∫–∞—Ä–µ–º'
    owner_phone = data_mr.get('owner_phone')
    pets_name, species, breed, owner_name = cur.execute("""SELECT name_pets, species, breed, owner_name FROM animals WHERE id_pets = ?""",
                              (data_mr.get('animal_id'),)).fetchone()

    animal_id = data_mr.get('animal_id')
    category = data_mr.get('category')
    tittle = data_mr.get('title')
    details = message.text
    doctor_name = cur.execute("""SELECT full_name FROM users WHERE telegram_id = ?""", (message.from_user.id,)).fetchone()[0]
    now = datetime.now()
    create_at = now.strftime("%Y-%m-%d %H:%M")
    try:
        cur.execute("""INSERT INTO medical_records (animal_id, date, category, title, details, doc_name, created_at) 
                            VALUES (?,?,?,?,?,?,?)""", (animal_id, date, category, tittle, details, doctor_name, create_at))
        base.commit()
        logger.info(f'–î–∞–Ω–Ω—ñ –∑–∞–Ω–µ—Å–µ–Ω—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö –ª—ñ–∫–∞—Ä–µ–º {doctor_name} o {create_at}')
        await message.answer('–ó–∞–ø–∏—Å –í–Ω–µ—Å–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.\n–ù–∞–¥—Å–∏–ª–∞—é —Ñ–∞–π–ª.', reply_markup=get_home_builder().as_markup())


        generate_tailmed_docx(data_mr, "output/report_tailmed.docx",
                              doctor_name, details, category, pets_name, species, breed, owner_name, owner_phone, create_at)

        file = FSInputFile("output/report_tailmed.docx")
        await message.answer_document(file, caption="üìÑ –í–∞—à TailMed –∑–≤—ñ—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ DOCX")

        await state.clear()
    except Exception as e:
        logger.warning(f'–í—ñ–¥–±—É–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞ –∑ –∑–∞–ø–∏—Å–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö {e} —Ñ—É–Ω–∫—Ü—ñ—è details_msg')
        await message.answer('‚ùå –í—ñ–¥–±—É–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=get_home_builder().as_markup())
        await state.clear()


@doctor_router.callback_query(MedicalRecording.get_details, F.data == 'Next')
async def details_callback(callback: types.CallbackQuery, state: FSMContext):
    data_mr = await state.get_data()
    if data_mr.get('date'):
        date = data_mr.get('date')
    else:
        date = '–ù–µ –≤–∫–∞–∑–∞–Ω–æ –ª—ñ–∫–∞—Ä–µ–º'
    owner_phone = data_mr.get('owner_phone')
    animal_id = data_mr.get('animal_id')
    category = data_mr.get('category')
    tittle = data_mr.get('title')
    details = '–õ—ñ–∫–∞—Ä –Ω–µ –≤–Ω—ñ—Å –¥–µ—Ç–∞–ª—ñ'
    doctor_name = cur.execute("""SELECT full_name FROM users WHERE telegram_id = ?""", (callback.from_user.id,)).fetchone()[0]
    now = datetime.now()
    create_at = now.strftime("%Y-%m-%d %H:%M")
    try:
        cur.execute("""INSERT INTO medical_records (animal_id, date, category, title, details, doc_name, created_at) 
                            VALUES (?,?,?,?,?,?,?)""", (animal_id, date, category, tittle, details, doctor_name, create_at))
        base.commit()
        logger.info(f'–î–∞–Ω–Ω—ñ –∑–∞–Ω–µ—Å–µ–Ω—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö –ª—ñ–∫–∞—Ä–µ–º {doctor_name} o {create_at}')
        await callback.message.answer('–ó–∞–ø–∏—Å –í–Ω–µ—Å–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.\n–ù–∞–¥—Å–∏–ª–∞—é —Ñ–∞–π–ª.',
                                      reply_markup=get_home_builder().as_markup())
        await state.clear()
    except Exception as e:
        logger.warning(f'–í—ñ–¥–±—É–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞ –∑ –∑–∞–ø–∏—Å–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö {e} —Ñ—É–Ω–∫—Ü—ñ—è details_msg')
        await callback.message.answer('‚ùå –í—ñ–¥–±—É–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
                                      reply_markup=get_home_builder().as_markup())
        await state.clear()





