from aiogram import types, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from key_file import cur, base
from log_file import logger
from key_file import all_time

doctor_router = Router()

class TimeDoctor(StatesGroup):
    check_time = State()


def get_doctor_buttons():
    return {
        'set_time': '‚è≥ –í–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∞—Å –ø—Ä–∏–π–æ–º—É',
    }

def doc_name(name):
    try:
        return cur.execute("""SELECT full_name FROM users WHERE telegram_id=?""", (name,)).fetchone()[0]

    except Exception as e:
        logger.error(f'‚ùå –ü–æ–º–∏–ª–∫–∞ {e} —Ñ—É–Ω–∫—Ü—ñ—è doc_name file doctor_file.py –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —ñ–º\ º—è –ª—ñ–∫–∞—Ä—è ')
        return '–ü–æ–º–∏–ª–∫–∞'


@doctor_router.callback_query(F.data == 'doc_meny')
async def meny_doctor(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    for key, value in get_doctor_buttons().items():
        builder.add(InlineKeyboardButton(text=value, callback_data=key))
    await callback.message.answer(f'üòÄ –í—ñ—Ç–∞—î–º–æ {doc_name(callback.from_user.id)} –≤–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é.', reply_markup=builder.as_markup())


@doctor_router.callback_query(F.data == 'set_time')
async def choose_hours(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(id_trainer=callback.from_user.id, selected_hours=[])

    builder = InlineKeyboardBuilder()
    for t in all_time:
        builder.add(types.InlineKeyboardButton(text=f'‚ùå {t}', callback_data=f'hours_{t.replace(":", "")}'))
    builder.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É ', callback_data='Home'))
    builder.adjust(3)
    builder.row(types.InlineKeyboardButton(text='‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏', callback_data='save_hours'))

    await callback.message.answer('‚è∞ –í–∏–±–µ—Ä–∏ –≥–æ–¥–∏–Ω–∏ –ø—Ä–∏–π–æ–º—É:', reply_markup=builder.as_markup())
    await state.set_state(TimeDoctor.check_time)


@doctor_router.callback_query(TimeDoctor.check_time, F.data.startswith('hours_'))
async def toggle_hour(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("selected_hours", [])
    time_val = callback.data.removeprefix('hours_')
    time_val = f"{time_val[:2]}:{time_val[2:]}"

    if time_val in selected:
        selected.remove(time_val)
    else:
        selected.append(time_val)
    await state.update_data(selected_hours=selected)

    # –û–Ω–æ–≤–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    for t in all_time:
        status = '‚úÖ' if t in selected else '‚ùå'
        builder.add(types.InlineKeyboardButton(text=f'{status} {t}', callback_data=f'hours_{t.replace(":", "")}'))
    builder.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='Home'))
    builder.adjust(3)
    builder.row(types.InlineKeyboardButton(text='‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏', callback_data='save_hours'))

    try:
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    except TelegramBadRequest:
        pass
    await callback.answer()


@doctor_router.callback_query(TimeDoctor.check_time, F.data == 'save_hours')
async def save_selected_hours(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    trainer_id = data['id_trainer']
    selected = data.get("selected_hours", [])
    times_string = ','.join(selected)
    builder = InlineKeyboardBuilder()
    try:
        cur.execute("UPDATE users SET time_doc = ? WHERE telegram_id = ?", (times_string, trainer_id))
        base.commit()
        builder.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='Home'))
        await callback.message.edit_text(f"‚úÖ –ì–æ–¥–∏–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {', '.join(selected)}", reply_markup=builder.as_markup())
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —á–∞—Å—É –ø—Ä–∏–π–æ–º—É –ª—ñ–∫–∞—Ä—è –≤ —Ñ—É–Ω–∫—Ü—ñ—ó save_selected_hours {e}')
        builder.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data='Home'))
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. "
                             "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=builder.as_markup())
        await state.clear()
        await callback.answer()
